name: Build and Push Docker Images

on:
  workflow_call:
    inputs:
      artifact_registry_region:
        required: true
        type: string
      artifact_registry_host:
        required: true
        type: string
      artifact_registry_repo:
        required: true
        type: string
      image_prefix:
        required: true
        type: string
      service:
        required: true
        type: string
      target:
        required: true
        type: string
      environment:
        required: false
        type: string
        default: "staging"
    secrets:
      GCP_PROJECT_ID:
        required: true
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_SERVICE_ACCOUNT_EMAIL:
        required: true

    outputs:
      tag:
        description: "Docker image tag"
        value: ${{ jobs.docker.outputs.tag }}

permissions:
  contents: read
  id-token: write

jobs:
  docker:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      ARTIFACT_REGISTRY_REGION: ${{ inputs.artifact_registry_region }}
      ARTIFACT_REGISTRY_HOST: ${{ inputs.artifact_registry_host }}
      ARTIFACT_REGISTRY_REPO: ${{ inputs.artifact_registry_repo }}
      IMAGE_PREFIX: ${{ inputs.image_prefix }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_REGION }}-${{ env.ARTIFACT_REGISTRY_HOST }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine Docker Image Tag
        id: vars
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            TAG="pr-${{ github.event.pull_request.number }}-${GITHUB_SHA:0:7}"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            TAG="main-${GITHUB_SHA:0:7}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            TAG="${GITHUB_SHA:0:7}"
          fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Fetch all secrets from Secret Manager
        id: fetch-secrets
        run: |
          echo "Listing all secrets from Secret Manager..."
          secrets_list=$(gcloud secrets list --format="value(name)")
          build_args=""
          if [ -z "$secrets_list" ]; then
            echo "No secrets found in Secret Manager."
          else
            echo "Found secrets:"
            echo "$secrets_list"
            for secret in $secrets_list; do
              echo "Fetching secret: $secret"
              secret_value=$(gcloud secrets versions access latest --secret="$secret")
              build_args="$build_args --build-arg ${secret}=$(printf '%q' "$secret_value")"
            done
          fi
          echo "build_args=$build_args" >> $GITHUB_OUTPUT
          echo "Docker build arguments: $build_args"

      - name: Build and Push Docker Image
        run: |
          IMAGE_BASE="${{ env.ARTIFACT_REGISTRY_REGION }}-${{ env.ARTIFACT_REGISTRY_HOST }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_PREFIX }}-${{ inputs.service }}"
          UNIQUE_TAG="${IMAGE_BASE}:${{ steps.vars.outputs.TAG }}"
          LATEST_TAG="${IMAGE_BASE}:latest"
          echo "Building ${{ inputs.service }} using target ${{ inputs.target }}..."
          docker build \
            --build-arg SERVICE=${{ inputs.service }} \
            ${{ steps.fetch-secrets.outputs.build_args }} \
            --target ${{ inputs.target }} \
            -t $UNIQUE_TAG \
            -t $LATEST_TAG \
            .
          echo "Pushing $UNIQUE_TAG..."
          docker push $UNIQUE_TAG
          echo "Pushing $LATEST_TAG..."
          docker push $LATEST_TAG

      - name: Output Images
        run: |
          echo "Images pushed:"
          IMAGE_BASE="${{ env.ARTIFACT_REGISTRY_REGION }}-${{ env.ARTIFACT_REGISTRY_HOST }}/${{ secrets.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_PREFIX }}-${{ inputs.service }}"
          echo "${IMAGE_BASE}:${{ steps.vars.outputs.TAG }}"
          echo "${IMAGE_BASE}:latest"

    outputs:
      tag: ${{ steps.vars.outputs.TAG }}
